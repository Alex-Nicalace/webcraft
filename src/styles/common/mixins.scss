@use 'sass:math';
@use '../variables.scss' as *;
@use './functions.scss' as *;

// * Подключение миксинов

//* Подключение шрифта
@mixin font($font_name, $file_name, $weight, $style) {
  @font-face {
    font-family: $font_name;
    font-display: swap;
    src:
      url('../fonts/#{$file_name}.woff2') format('woff2'),
      url('../fonts/#{$file_name}.woff') format('woff');
    font-weight: #{$weight};
    font-style: #{$style};
  }
}

//* Currency
@mixin currency($sym) {
  &::after {
    content: '#{$sym}';
  }
}

//* Grids
@mixin gridCards($type: fit, $min: 280px, $max: 1fr, $gap: 30px) {
  display: grid;
  gap: $gap;
  grid-template-columns: repeat(auto-#{$type}, minmax($min, $max));
}

//* Адаптивное свойство (clamp)
@mixin adaptiveValue(
  $property,
  $startSize,
  $minSize,
  $widthFrom: $containerWidth,
  $widthTo: $minWidth,
  $keepSize: 0
) {
  @if ($startSize==0) {
    $startSize: 0.000001;
  }
  @if ($minSize==0) {
    $minSize: 0.000001;
  }

  // Для calc();
  $addSize: math.div($startSize - $minSize, 16);

  @if ($widthFrom == $containerWidth and $maxWidthContainer == 0) {
    $widthFrom: $maxWidth;
  }

  // Брейк-поинты в EM
  $widthFromMedia: em($widthFrom);
  $widthToMedia: em($widthTo);

  // Формула плавающего значения
  // Источник: https://*css-tricks.com/linearly-scale-font-size-with-css-clamp-based-on-the-viewport/
  $slope: math.div(($startSize - $minSize), ($widthFrom - $widthTo));
  $yIntersection: -$widthTo * $slope + $minSize;
  @if ($yIntersection==0) {
    $yIntersection: 0.000001;
  }
  $flyValue: #{rem($yIntersection)}' + ' #{$slope * 100}vw;

  // Получение значения свойства
  $propertyValue: #{'clamp(' rem($minSize) ',' $flyValue ',' rem($startSize) ')'};
  // Если отрицательные значения
  @if ($minSize > $startSize) {
    $propertyValue: #{'clamp('
      rem($startSize)
      ','
      $flyValue
      ','
      rem($minSize)
      ')'};
  }

  // Если поддерживается clamp();
  @supports (width: clamp(0px, 0px, 0px)) {
    #{$property}: $propertyValue;
  }
  // Если не поддерживается clamp();
  @supports (not (width: clamp(0px, 0px, 0px))) {
    #{$property}: calc(
      #{rem($minSize)} + #{$addSize} * (100vw - #{rem($widthTo)}) / #{math.div(
          $widthFrom,
          16
        ) - math.div($widthTo, 16)}
    );
    // макс. (стартовое) значение когда экран больше "ширины от"
    @media (min-width: $widthFromMedia) {
      #{$property}: #{rem($startSize)};
    }
    // мин. (конечное) значение когда экран меньше "ширины до"
    @media (max-width: $widthToMedia) {
      #{$property}: #{rem($minSize)};
    }
  }

  // Устанавливаем значения по умолчанию
  @if $widthFrom !=
    $containerWidth and
    $widthFrom !=
    $maxWidth and
    $keepSize !=
    1 and
    $keepSize !=
    2
  {
    @media (min-width: $widthFromMedia) {
      #{$property}: inherit;
    }
  }
  @if $widthTo != $minWidth and $keepSize != 1 and $keepSize != 3 {
    @media (max-width: $widthToMedia) {
      #{$property}: inherit;
    }
  }
}
//* -------------------------------------------------------------------------------------------

//* анимированное подчеркивание
@mixin hover-animate-underline(
  $size: rem(2),
  $position: 0%,
  $selector-hover: '&:hover',
  $transDelay: 0.3s
) {
  text-decoration: none;
  background-image: linear-gradient(currentColor, currentColor);
  background-position: $position 100%;
  background-repeat: no-repeat;
  background-size: 0% $size;
  transition: background-size $transDelay;

  @media (any-hover: hover) {
    #{$selector-hover} {
      background-size: 100% $size;
    }
  }
}
