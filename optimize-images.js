import fs from 'fs-extra';
import path from 'path';
import sharp from 'sharp';
import glob from 'fast-glob';

// –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–∞—á–µ—Å—Ç–≤–∞
const JPEG_QUALITY = 85;
const WEBP_QUALITY = 85;
const PNG_QUALITY = 70;

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
async function processImages() {
  const imageFiles = await glob('src/assets/img/**/*.{jpg,jpeg,png}', {
    absolute: true,
    ignore: ['**/*.bak.{jpg,jpeg,png}'], // –ò—Å–∫–ª—é—á–∞–µ–º —Ñ–∞–π–ª—ã —Å .bak.jpg, .bak.jpeg, .bak.png
  });

  for (const file of imageFiles) {
    const ext = path.extname(file);
    const dir = path.dirname(file);
    const baseName = path.basename(file, ext);

    const originalBackup = path.join(dir, `${baseName}.bak${ext}`); // –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π backup
    const compressedOutput = path.join(dir, `${baseName}${ext}`);
    const webpOutput = path.join(dir, `${baseName}.webp`);

    try {
      // –°–æ–∑–¥–∞–µ–º .bak –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç (–∫–æ–ø–∏—Ä—É–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª)
      if (!fs.existsSync(originalBackup)) {
        await fs.copy(file, originalBackup);
        console.log(`üõ†Ô∏è Backup —Å–æ–∑–¥–∞–Ω: ${originalBackup}`);
      }

      // –°–∂–∏–º–∞–µ–º JPEG –∏–∑ .bak (–µ—Å–ª–∏ –µ—Å—Ç—å), –∏–Ω–∞—á–µ –∏–∑ –æ—Ä–∏–≥–∏–Ω–∞–ª–∞
      const sourceFile = fs.existsSync(originalBackup) ? originalBackup : file;

      if (ext === '.jpg' || ext === '.jpeg') {
        await sharp(sourceFile)
          .jpeg({ quality: JPEG_QUALITY })
          .toFile(compressedOutput);

        // –°–æ–∑–¥–∞—ë–º WebP
        await sharp(sourceFile)
          .webp({ quality: WEBP_QUALITY })
          .toFile(webpOutput);
      }

      if (ext === '.png') {
        // –∏–∑ png webp –ø–æ–ª—É—á–∞–µ—Ç—Å—è –±–æ–ª—å—à–µ–≥–æ —Ä–∞–∑–º–µ—Ä–∞ => –ø–æ—ç—Ç–æ–º—É —Å–∂–∏–º–∞–µ–º png
        await sharp(sourceFile)
          .png({ quality: PNG_QUALITY })
          .toFile(compressedOutput);
      }

      console.log(`‚úÖ –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–æ: ${file}`);
    } catch (err) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ ${file}:`, err);
    }
  }
}

processImages();
